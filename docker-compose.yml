version: '3.8'

services:
  # Main fraud detection API
  fraud-detection-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: paypal-fraud-api
    ports:
      - "8000:8000"
    environment:
      - PYTHONPATH=/app
      - LOG_LEVEL=info
    volumes:
      - ./models:/app/models:ro
      - ./data:/app/data:ro
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - fraud-detection-network

  # Streamlit demo application
  fraud-detection-demo:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: paypal-fraud-demo
    ports:
      - "8501:8501"
    environment:
      - PYTHONPATH=/app
    command: ["streamlit", "run", "demo.py", "--server.port=8501", "--server.address=0.0.0.0"]
    depends_on:
      fraud-detection-api:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    networks:
      - fraud-detection-network

  # Optional: Redis for caching (if needed)
  redis:
    image: redis:7-alpine
    container_name: paypal-fraud-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    restart: unless-stopped
    networks:
      - fraud-detection-network

  # Optional: Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: paypal-fraud-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - fraud-detection-network

  # Optional: Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: paypal-fraud-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - fraud-detection-network

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: paypal-fraud-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - fraud-detection-api
      - fraud-detection-demo
    restart: unless-stopped
    networks:
      - fraud-detection-network

volumes:
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  fraud-detection-network:
    driver: bridge
    name: fraud-detection-network
